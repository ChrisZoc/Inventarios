//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace CapaPersistencia
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(COMPRADEMATERIAPRIMA))]
    public partial class DEVOLUCIONDEMATERIAPRIMA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
        [DataMember]
        public int IDDEVOLUCION
        {
            get { return _iDDEVOLUCION; }
            set
            {
                if (_iDDEVOLUCION != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IDDEVOLUCION' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iDDEVOLUCION = value;
                    OnPropertyChanged("IDDEVOLUCION");
                }
            }
        }
        private int _iDDEVOLUCION;
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    ChangeTracker.RecordOriginalValue("ID", _iD);
                    if (!IsDeserializing)
                    {
                        if (COMPRADEMATERIAPRIMA != null && COMPRADEMATERIAPRIMA.ID != value)
                        {
                            COMPRADEMATERIAPRIMA = null;
                        }
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public Nullable<decimal> CANTIDADDEVOLUCION
        {
            get { return _cANTIDADDEVOLUCION; }
            set
            {
                if (_cANTIDADDEVOLUCION != value)
                {
                    _cANTIDADDEVOLUCION = value;
                    OnPropertyChanged("CANTIDADDEVOLUCION");
                }
            }
        }
        private Nullable<decimal> _cANTIDADDEVOLUCION;
    
        [DataMember]
        public string RAZONDEVOLUCION
        {
            get { return _rAZONDEVOLUCION; }
            set
            {
                if (_rAZONDEVOLUCION != value)
                {
                    _rAZONDEVOLUCION = value;
                    OnPropertyChanged("RAZONDEVOLUCION");
                }
            }
        }
        private string _rAZONDEVOLUCION;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<COMPRADEMATERIAPRIMA> COMPRADEMATERIAPRIMAs
        {
            get
            {
                if (_cOMPRADEMATERIAPRIMAs == null)
                {
                    _cOMPRADEMATERIAPRIMAs = new TrackableCollection<COMPRADEMATERIAPRIMA>();
                    _cOMPRADEMATERIAPRIMAs.CollectionChanged += FixupCOMPRADEMATERIAPRIMAs;
                }
                return _cOMPRADEMATERIAPRIMAs;
            }
            set
            {
                if (!ReferenceEquals(_cOMPRADEMATERIAPRIMAs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cOMPRADEMATERIAPRIMAs != null)
                    {
                        _cOMPRADEMATERIAPRIMAs.CollectionChanged -= FixupCOMPRADEMATERIAPRIMAs;
                    }
                    _cOMPRADEMATERIAPRIMAs = value;
                    if (_cOMPRADEMATERIAPRIMAs != null)
                    {
                        _cOMPRADEMATERIAPRIMAs.CollectionChanged += FixupCOMPRADEMATERIAPRIMAs;
                    }
                    OnNavigationPropertyChanged("COMPRADEMATERIAPRIMAs");
                }
            }
        }
        private TrackableCollection<COMPRADEMATERIAPRIMA> _cOMPRADEMATERIAPRIMAs;
    
        [DataMember]
        public COMPRADEMATERIAPRIMA COMPRADEMATERIAPRIMA
        {
            get { return _cOMPRADEMATERIAPRIMA; }
            set
            {
                if (!ReferenceEquals(_cOMPRADEMATERIAPRIMA, value))
                {
                    var previousValue = _cOMPRADEMATERIAPRIMA;
                    _cOMPRADEMATERIAPRIMA = value;
                    FixupCOMPRADEMATERIAPRIMA(previousValue);
                    OnNavigationPropertyChanged("COMPRADEMATERIAPRIMA");
                }
            }
        }
        private COMPRADEMATERIAPRIMA _cOMPRADEMATERIAPRIMA;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            COMPRADEMATERIAPRIMAs.Clear();
            COMPRADEMATERIAPRIMA = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCOMPRADEMATERIAPRIMA(COMPRADEMATERIAPRIMA previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DEVOLUCIONDEMATERIAPRIMAs.Contains(this))
            {
                previousValue.DEVOLUCIONDEMATERIAPRIMAs.Remove(this);
            }
    
            if (COMPRADEMATERIAPRIMA != null)
            {
                COMPRADEMATERIAPRIMA.DEVOLUCIONDEMATERIAPRIMAs.Add(this);
    
                ID = COMPRADEMATERIAPRIMA.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("COMPRADEMATERIAPRIMA")
                    && (ChangeTracker.OriginalValues["COMPRADEMATERIAPRIMA"] == COMPRADEMATERIAPRIMA))
                {
                    ChangeTracker.OriginalValues.Remove("COMPRADEMATERIAPRIMA");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("COMPRADEMATERIAPRIMA", previousValue);
                }
                if (COMPRADEMATERIAPRIMA != null && !COMPRADEMATERIAPRIMA.ChangeTracker.ChangeTrackingEnabled)
                {
                    COMPRADEMATERIAPRIMA.StartTracking();
                }
            }
        }
    
        private void FixupCOMPRADEMATERIAPRIMAs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (COMPRADEMATERIAPRIMA item in e.NewItems)
                {
                    item.DEVOLUCIONDEMATERIAPRIMA = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("COMPRADEMATERIAPRIMAs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (COMPRADEMATERIAPRIMA item in e.OldItems)
                {
                    if (ReferenceEquals(item.DEVOLUCIONDEMATERIAPRIMA, this))
                    {
                        item.DEVOLUCIONDEMATERIAPRIMA = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("COMPRADEMATERIAPRIMAs", item);
                    }
                }
            }
        }

        #endregion

    }
}
