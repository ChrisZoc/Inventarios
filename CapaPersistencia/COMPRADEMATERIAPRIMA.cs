//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace CapaPersistencia
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DEVOLUCIONDEMATERIAPRIMA))]
    [KnownType(typeof(LOTE))]
    [KnownType(typeof(PROVEEDOR))]
    [KnownType(typeof(TIPOMATERIAPRIMA))]
    public partial class COMPRADEMATERIAPRIMA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public Nullable<int> IDDEVOLUCION
        {
            get { return _iDDEVOLUCION; }
            set
            {
                if (_iDDEVOLUCION != value)
                {
                    ChangeTracker.RecordOriginalValue("IDDEVOLUCION", _iDDEVOLUCION);
                    if (!IsDeserializing)
                    {
                        if (DEVOLUCIONDEMATERIAPRIMA != null && DEVOLUCIONDEMATERIAPRIMA.IDDEVOLUCION != value)
                        {
                            DEVOLUCIONDEMATERIAPRIMA = null;
                        }
                    }
                    _iDDEVOLUCION = value;
                    OnPropertyChanged("IDDEVOLUCION");
                }
            }
        }
        private Nullable<int> _iDDEVOLUCION;
    
        [DataMember]
        public int IDPROVEEDOR
        {
            get { return _iDPROVEEDOR; }
            set
            {
                if (_iDPROVEEDOR != value)
                {
                    ChangeTracker.RecordOriginalValue("IDPROVEEDOR", _iDPROVEEDOR);
                    if (!IsDeserializing)
                    {
                        if (PROVEEDOR != null && PROVEEDOR.IDPROVEEDOR != value)
                        {
                            PROVEEDOR = null;
                        }
                    }
                    _iDPROVEEDOR = value;
                    OnPropertyChanged("IDPROVEEDOR");
                }
            }
        }
        private int _iDPROVEEDOR;
    
        [DataMember]
        public Nullable<int> IDLOTE
        {
            get { return _iDLOTE; }
            set
            {
                if (_iDLOTE != value)
                {
                    ChangeTracker.RecordOriginalValue("IDLOTE", _iDLOTE);
                    if (!IsDeserializing)
                    {
                        if (LOTE != null && LOTE.IDLOTE != value)
                        {
                            LOTE = null;
                        }
                    }
                    _iDLOTE = value;
                    OnPropertyChanged("IDLOTE");
                }
            }
        }
        private Nullable<int> _iDLOTE;
    
        [DataMember]
        public int IDTIPOMATERIAPRIMA
        {
            get { return _iDTIPOMATERIAPRIMA; }
            set
            {
                if (_iDTIPOMATERIAPRIMA != value)
                {
                    ChangeTracker.RecordOriginalValue("IDTIPOMATERIAPRIMA", _iDTIPOMATERIAPRIMA);
                    if (!IsDeserializing)
                    {
                        if (TIPOMATERIAPRIMA != null && TIPOMATERIAPRIMA.IDTIPOMATERIAPRIMA != value)
                        {
                            TIPOMATERIAPRIMA = null;
                        }
                    }
                    _iDTIPOMATERIAPRIMA = value;
                    OnPropertyChanged("IDTIPOMATERIAPRIMA");
                }
            }
        }
        private int _iDTIPOMATERIAPRIMA;
    
        [DataMember]
        public Nullable<System.DateTime> FECHACOMPRA
        {
            get { return _fECHACOMPRA; }
            set
            {
                if (_fECHACOMPRA != value)
                {
                    _fECHACOMPRA = value;
                    OnPropertyChanged("FECHACOMPRA");
                }
            }
        }
        private Nullable<System.DateTime> _fECHACOMPRA;
    
        [DataMember]
        public string SEMANACOMPRA
        {
            get { return _sEMANACOMPRA; }
            set
            {
                if (_sEMANACOMPRA != value)
                {
                    _sEMANACOMPRA = value;
                    OnPropertyChanged("SEMANACOMPRA");
                }
            }
        }
        private string _sEMANACOMPRA;
    
        [DataMember]
        public Nullable<bool> ESTADOCOMPRAMATERIAPRIMA
        {
            get { return _eSTADOCOMPRAMATERIAPRIMA; }
            set
            {
                if (_eSTADOCOMPRAMATERIAPRIMA != value)
                {
                    _eSTADOCOMPRAMATERIAPRIMA = value;
                    OnPropertyChanged("ESTADOCOMPRAMATERIAPRIMA");
                }
            }
        }
        private Nullable<bool> _eSTADOCOMPRAMATERIAPRIMA;
    
        [DataMember]
        public Nullable<decimal> PRECIOCOMPRAMATERIAPRIMA
        {
            get { return _pRECIOCOMPRAMATERIAPRIMA; }
            set
            {
                if (_pRECIOCOMPRAMATERIAPRIMA != value)
                {
                    _pRECIOCOMPRAMATERIAPRIMA = value;
                    OnPropertyChanged("PRECIOCOMPRAMATERIAPRIMA");
                }
            }
        }
        private Nullable<decimal> _pRECIOCOMPRAMATERIAPRIMA;
    
        [DataMember]
        public Nullable<decimal> PESOCOMPRA
        {
            get { return _pESOCOMPRA; }
            set
            {
                if (_pESOCOMPRA != value)
                {
                    _pESOCOMPRA = value;
                    OnPropertyChanged("PESOCOMPRA");
                }
            }
        }
        private Nullable<decimal> _pESOCOMPRA;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public DEVOLUCIONDEMATERIAPRIMA DEVOLUCIONDEMATERIAPRIMA
        {
            get { return _dEVOLUCIONDEMATERIAPRIMA; }
            set
            {
                if (!ReferenceEquals(_dEVOLUCIONDEMATERIAPRIMA, value))
                {
                    var previousValue = _dEVOLUCIONDEMATERIAPRIMA;
                    _dEVOLUCIONDEMATERIAPRIMA = value;
                    FixupDEVOLUCIONDEMATERIAPRIMA(previousValue);
                    OnNavigationPropertyChanged("DEVOLUCIONDEMATERIAPRIMA");
                }
            }
        }
        private DEVOLUCIONDEMATERIAPRIMA _dEVOLUCIONDEMATERIAPRIMA;
    
        [DataMember]
        public LOTE LOTE
        {
            get { return _lOTE; }
            set
            {
                if (!ReferenceEquals(_lOTE, value))
                {
                    var previousValue = _lOTE;
                    _lOTE = value;
                    FixupLOTE(previousValue);
                    OnNavigationPropertyChanged("LOTE");
                }
            }
        }
        private LOTE _lOTE;
    
        [DataMember]
        public PROVEEDOR PROVEEDOR
        {
            get { return _pROVEEDOR; }
            set
            {
                if (!ReferenceEquals(_pROVEEDOR, value))
                {
                    var previousValue = _pROVEEDOR;
                    _pROVEEDOR = value;
                    FixupPROVEEDOR(previousValue);
                    OnNavigationPropertyChanged("PROVEEDOR");
                }
            }
        }
        private PROVEEDOR _pROVEEDOR;
    
        [DataMember]
        public TIPOMATERIAPRIMA TIPOMATERIAPRIMA
        {
            get { return _tIPOMATERIAPRIMA; }
            set
            {
                if (!ReferenceEquals(_tIPOMATERIAPRIMA, value))
                {
                    var previousValue = _tIPOMATERIAPRIMA;
                    _tIPOMATERIAPRIMA = value;
                    FixupTIPOMATERIAPRIMA(previousValue);
                    OnNavigationPropertyChanged("TIPOMATERIAPRIMA");
                }
            }
        }
        private TIPOMATERIAPRIMA _tIPOMATERIAPRIMA;
    
        [DataMember]
        public TrackableCollection<DEVOLUCIONDEMATERIAPRIMA> DEVOLUCIONDEMATERIAPRIMAs
        {
            get
            {
                if (_dEVOLUCIONDEMATERIAPRIMAs == null)
                {
                    _dEVOLUCIONDEMATERIAPRIMAs = new TrackableCollection<DEVOLUCIONDEMATERIAPRIMA>();
                    _dEVOLUCIONDEMATERIAPRIMAs.CollectionChanged += FixupDEVOLUCIONDEMATERIAPRIMAs;
                }
                return _dEVOLUCIONDEMATERIAPRIMAs;
            }
            set
            {
                if (!ReferenceEquals(_dEVOLUCIONDEMATERIAPRIMAs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dEVOLUCIONDEMATERIAPRIMAs != null)
                    {
                        _dEVOLUCIONDEMATERIAPRIMAs.CollectionChanged -= FixupDEVOLUCIONDEMATERIAPRIMAs;
                    }
                    _dEVOLUCIONDEMATERIAPRIMAs = value;
                    if (_dEVOLUCIONDEMATERIAPRIMAs != null)
                    {
                        _dEVOLUCIONDEMATERIAPRIMAs.CollectionChanged += FixupDEVOLUCIONDEMATERIAPRIMAs;
                    }
                    OnNavigationPropertyChanged("DEVOLUCIONDEMATERIAPRIMAs");
                }
            }
        }
        private TrackableCollection<DEVOLUCIONDEMATERIAPRIMA> _dEVOLUCIONDEMATERIAPRIMAs;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DEVOLUCIONDEMATERIAPRIMA = null;
            LOTE = null;
            PROVEEDOR = null;
            TIPOMATERIAPRIMA = null;
            DEVOLUCIONDEMATERIAPRIMAs.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupDEVOLUCIONDEMATERIAPRIMA(DEVOLUCIONDEMATERIAPRIMA previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.COMPRADEMATERIAPRIMAs.Contains(this))
            {
                previousValue.COMPRADEMATERIAPRIMAs.Remove(this);
            }
    
            if (DEVOLUCIONDEMATERIAPRIMA != null)
            {
                DEVOLUCIONDEMATERIAPRIMA.COMPRADEMATERIAPRIMAs.Add(this);
    
                IDDEVOLUCION = DEVOLUCIONDEMATERIAPRIMA.IDDEVOLUCION;
            }
            else if (!skipKeys)
            {
                IDDEVOLUCION = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DEVOLUCIONDEMATERIAPRIMA")
                    && (ChangeTracker.OriginalValues["DEVOLUCIONDEMATERIAPRIMA"] == DEVOLUCIONDEMATERIAPRIMA))
                {
                    ChangeTracker.OriginalValues.Remove("DEVOLUCIONDEMATERIAPRIMA");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DEVOLUCIONDEMATERIAPRIMA", previousValue);
                }
                if (DEVOLUCIONDEMATERIAPRIMA != null && !DEVOLUCIONDEMATERIAPRIMA.ChangeTracker.ChangeTrackingEnabled)
                {
                    DEVOLUCIONDEMATERIAPRIMA.StartTracking();
                }
            }
        }
    
        private void FixupLOTE(LOTE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.COMPRADEMATERIAPRIMAs.Contains(this))
            {
                previousValue.COMPRADEMATERIAPRIMAs.Remove(this);
            }
    
            if (LOTE != null)
            {
                LOTE.COMPRADEMATERIAPRIMAs.Add(this);
    
                IDLOTE = LOTE.IDLOTE;
            }
            else if (!skipKeys)
            {
                IDLOTE = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LOTE")
                    && (ChangeTracker.OriginalValues["LOTE"] == LOTE))
                {
                    ChangeTracker.OriginalValues.Remove("LOTE");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LOTE", previousValue);
                }
                if (LOTE != null && !LOTE.ChangeTracker.ChangeTrackingEnabled)
                {
                    LOTE.StartTracking();
                }
            }
        }
    
        private void FixupPROVEEDOR(PROVEEDOR previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.COMPRADEMATERIAPRIMAs.Contains(this))
            {
                previousValue.COMPRADEMATERIAPRIMAs.Remove(this);
            }
    
            if (PROVEEDOR != null)
            {
                PROVEEDOR.COMPRADEMATERIAPRIMAs.Add(this);
    
                IDPROVEEDOR = PROVEEDOR.IDPROVEEDOR;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PROVEEDOR")
                    && (ChangeTracker.OriginalValues["PROVEEDOR"] == PROVEEDOR))
                {
                    ChangeTracker.OriginalValues.Remove("PROVEEDOR");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PROVEEDOR", previousValue);
                }
                if (PROVEEDOR != null && !PROVEEDOR.ChangeTracker.ChangeTrackingEnabled)
                {
                    PROVEEDOR.StartTracking();
                }
            }
        }
    
        private void FixupTIPOMATERIAPRIMA(TIPOMATERIAPRIMA previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.COMPRADEMATERIAPRIMAs.Contains(this))
            {
                previousValue.COMPRADEMATERIAPRIMAs.Remove(this);
            }
    
            if (TIPOMATERIAPRIMA != null)
            {
                TIPOMATERIAPRIMA.COMPRADEMATERIAPRIMAs.Add(this);
    
                IDTIPOMATERIAPRIMA = TIPOMATERIAPRIMA.IDTIPOMATERIAPRIMA;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TIPOMATERIAPRIMA")
                    && (ChangeTracker.OriginalValues["TIPOMATERIAPRIMA"] == TIPOMATERIAPRIMA))
                {
                    ChangeTracker.OriginalValues.Remove("TIPOMATERIAPRIMA");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TIPOMATERIAPRIMA", previousValue);
                }
                if (TIPOMATERIAPRIMA != null && !TIPOMATERIAPRIMA.ChangeTracker.ChangeTrackingEnabled)
                {
                    TIPOMATERIAPRIMA.StartTracking();
                }
            }
        }
    
        private void FixupDEVOLUCIONDEMATERIAPRIMAs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DEVOLUCIONDEMATERIAPRIMA item in e.NewItems)
                {
                    item.COMPRADEMATERIAPRIMA = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DEVOLUCIONDEMATERIAPRIMAs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DEVOLUCIONDEMATERIAPRIMA item in e.OldItems)
                {
                    if (ReferenceEquals(item.COMPRADEMATERIAPRIMA, this))
                    {
                        item.COMPRADEMATERIAPRIMA = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DEVOLUCIONDEMATERIAPRIMAs", item);
                    }
                }
            }
        }

        #endregion

    }
}
