//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace CapaPersistencia
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PRODUCTOTERMINADO))]
    public partial class DEVOLUCIONPRODUCTOTERMINADO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
        [DataMember]
        public int IDDEVOLUCIONPROD
        {
            get { return _iDDEVOLUCIONPROD; }
            set
            {
                if (_iDDEVOLUCIONPROD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IDDEVOLUCIONPROD' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iDDEVOLUCIONPROD = value;
                    OnPropertyChanged("IDDEVOLUCIONPROD");
                }
            }
        }
        private int _iDDEVOLUCIONPROD;
    
        [DataMember]
        public int IDPRODUCTOTERMINADO
        {
            get { return _iDPRODUCTOTERMINADO; }
            set
            {
                if (_iDPRODUCTOTERMINADO != value)
                {
                    ChangeTracker.RecordOriginalValue("IDPRODUCTOTERMINADO", _iDPRODUCTOTERMINADO);
                    if (!IsDeserializing)
                    {
                        if (PRODUCTOTERMINADO != null && PRODUCTOTERMINADO.IDPRODUCTOTERMINADO != value)
                        {
                            PRODUCTOTERMINADO = null;
                        }
                    }
                    _iDPRODUCTOTERMINADO = value;
                    OnPropertyChanged("IDPRODUCTOTERMINADO");
                }
            }
        }
        private int _iDPRODUCTOTERMINADO;
    
        [DataMember]
        public string RAZONDEVOLUCIONPRODUCTO
        {
            get { return _rAZONDEVOLUCIONPRODUCTO; }
            set
            {
                if (_rAZONDEVOLUCIONPRODUCTO != value)
                {
                    _rAZONDEVOLUCIONPRODUCTO = value;
                    OnPropertyChanged("RAZONDEVOLUCIONPRODUCTO");
                }
            }
        }
        private string _rAZONDEVOLUCIONPRODUCTO;
    
        [DataMember]
        public Nullable<double> CANTIDADDEVOLUCIONPRODUCTO
        {
            get { return _cANTIDADDEVOLUCIONPRODUCTO; }
            set
            {
                if (_cANTIDADDEVOLUCIONPRODUCTO != value)
                {
                    _cANTIDADDEVOLUCIONPRODUCTO = value;
                    OnPropertyChanged("CANTIDADDEVOLUCIONPRODUCTO");
                }
            }
        }
        private Nullable<double> _cANTIDADDEVOLUCIONPRODUCTO;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public PRODUCTOTERMINADO PRODUCTOTERMINADO
        {
            get { return _pRODUCTOTERMINADO; }
            set
            {
                if (!ReferenceEquals(_pRODUCTOTERMINADO, value))
                {
                    var previousValue = _pRODUCTOTERMINADO;
                    _pRODUCTOTERMINADO = value;
                    FixupPRODUCTOTERMINADO(previousValue);
                    OnNavigationPropertyChanged("PRODUCTOTERMINADO");
                }
            }
        }
        private PRODUCTOTERMINADO _pRODUCTOTERMINADO;
    
        [DataMember]
        public TrackableCollection<PRODUCTOTERMINADO> PRODUCTOTERMINADOes
        {
            get
            {
                if (_pRODUCTOTERMINADOes == null)
                {
                    _pRODUCTOTERMINADOes = new TrackableCollection<PRODUCTOTERMINADO>();
                    _pRODUCTOTERMINADOes.CollectionChanged += FixupPRODUCTOTERMINADOes;
                }
                return _pRODUCTOTERMINADOes;
            }
            set
            {
                if (!ReferenceEquals(_pRODUCTOTERMINADOes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pRODUCTOTERMINADOes != null)
                    {
                        _pRODUCTOTERMINADOes.CollectionChanged -= FixupPRODUCTOTERMINADOes;
                    }
                    _pRODUCTOTERMINADOes = value;
                    if (_pRODUCTOTERMINADOes != null)
                    {
                        _pRODUCTOTERMINADOes.CollectionChanged += FixupPRODUCTOTERMINADOes;
                    }
                    OnNavigationPropertyChanged("PRODUCTOTERMINADOes");
                }
            }
        }
        private TrackableCollection<PRODUCTOTERMINADO> _pRODUCTOTERMINADOes;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PRODUCTOTERMINADO = null;
            PRODUCTOTERMINADOes.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupPRODUCTOTERMINADO(PRODUCTOTERMINADO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DEVOLUCIONPRODUCTOTERMINADOes.Contains(this))
            {
                previousValue.DEVOLUCIONPRODUCTOTERMINADOes.Remove(this);
            }
    
            if (PRODUCTOTERMINADO != null)
            {
                PRODUCTOTERMINADO.DEVOLUCIONPRODUCTOTERMINADOes.Add(this);
    
                IDPRODUCTOTERMINADO = PRODUCTOTERMINADO.IDPRODUCTOTERMINADO;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUCTOTERMINADO")
                    && (ChangeTracker.OriginalValues["PRODUCTOTERMINADO"] == PRODUCTOTERMINADO))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUCTOTERMINADO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUCTOTERMINADO", previousValue);
                }
                if (PRODUCTOTERMINADO != null && !PRODUCTOTERMINADO.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUCTOTERMINADO.StartTracking();
                }
            }
        }
    
        private void FixupPRODUCTOTERMINADOes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PRODUCTOTERMINADO item in e.NewItems)
                {
                    item.DEVOLUCIONPRODUCTOTERMINADO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PRODUCTOTERMINADOes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PRODUCTOTERMINADO item in e.OldItems)
                {
                    if (ReferenceEquals(item.DEVOLUCIONPRODUCTOTERMINADO, this))
                    {
                        item.DEVOLUCIONPRODUCTOTERMINADO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PRODUCTOTERMINADOes", item);
                    }
                }
            }
        }

        #endregion

    }
}
