//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace CapaPersistencia
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DEVOLUCIONPRODUCTOTERMINADO))]
    [KnownType(typeof(LOTE))]
    [KnownType(typeof(TIPOPRODUCTOTERMINADO))]
    public partial class PRODUCTOTERMINADO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
        [DataMember]
        public int IDPRODUCTOTERMINADO
        {
            get { return _iDPRODUCTOTERMINADO; }
            set
            {
                if (_iDPRODUCTOTERMINADO != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IDPRODUCTOTERMINADO' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iDPRODUCTOTERMINADO = value;
                    OnPropertyChanged("IDPRODUCTOTERMINADO");
                }
            }
        }
        private int _iDPRODUCTOTERMINADO;
    
        [DataMember]
        public Nullable<int> IDDEVOLUCIONPROD
        {
            get { return _iDDEVOLUCIONPROD; }
            set
            {
                if (_iDDEVOLUCIONPROD != value)
                {
                    ChangeTracker.RecordOriginalValue("IDDEVOLUCIONPROD", _iDDEVOLUCIONPROD);
                    if (!IsDeserializing)
                    {
                        if (DEVOLUCIONPRODUCTOTERMINADO != null && DEVOLUCIONPRODUCTOTERMINADO.IDDEVOLUCIONPROD != value)
                        {
                            DEVOLUCIONPRODUCTOTERMINADO = null;
                        }
                    }
                    _iDDEVOLUCIONPROD = value;
                    OnPropertyChanged("IDDEVOLUCIONPROD");
                }
            }
        }
        private Nullable<int> _iDDEVOLUCIONPROD;
    
        [DataMember]
        public int IDTIPOPRODUCTOTERMINADO
        {
            get { return _iDTIPOPRODUCTOTERMINADO; }
            set
            {
                if (_iDTIPOPRODUCTOTERMINADO != value)
                {
                    ChangeTracker.RecordOriginalValue("IDTIPOPRODUCTOTERMINADO", _iDTIPOPRODUCTOTERMINADO);
                    if (!IsDeserializing)
                    {
                        if (TIPOPRODUCTOTERMINADO != null && TIPOPRODUCTOTERMINADO.IDTIPOPRODUCTOTERMINADO != value)
                        {
                            TIPOPRODUCTOTERMINADO = null;
                        }
                    }
                    _iDTIPOPRODUCTOTERMINADO = value;
                    OnPropertyChanged("IDTIPOPRODUCTOTERMINADO");
                }
            }
        }
        private int _iDTIPOPRODUCTOTERMINADO;
    
        [DataMember]
        public Nullable<int> IDLOTE
        {
            get { return _iDLOTE; }
            set
            {
                if (_iDLOTE != value)
                {
                    ChangeTracker.RecordOriginalValue("IDLOTE", _iDLOTE);
                    if (!IsDeserializing)
                    {
                        if (LOTE != null && LOTE.IDLOTE != value)
                        {
                            LOTE = null;
                        }
                    }
                    _iDLOTE = value;
                    OnPropertyChanged("IDLOTE");
                }
            }
        }
        private Nullable<int> _iDLOTE;
    
        [DataMember]
        public Nullable<double> PRECIOTERMINADO
        {
            get { return _pRECIOTERMINADO; }
            set
            {
                if (_pRECIOTERMINADO != value)
                {
                    _pRECIOTERMINADO = value;
                    OnPropertyChanged("PRECIOTERMINADO");
                }
            }
        }
        private Nullable<double> _pRECIOTERMINADO;
    
        [DataMember]
        public Nullable<int> CANTIDADPRODUCTOTERMINADO
        {
            get { return _cANTIDADPRODUCTOTERMINADO; }
            set
            {
                if (_cANTIDADPRODUCTOTERMINADO != value)
                {
                    _cANTIDADPRODUCTOTERMINADO = value;
                    OnPropertyChanged("CANTIDADPRODUCTOTERMINADO");
                }
            }
        }
        private Nullable<int> _cANTIDADPRODUCTOTERMINADO;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DEVOLUCIONPRODUCTOTERMINADO> DEVOLUCIONPRODUCTOTERMINADOes
        {
            get
            {
                if (_dEVOLUCIONPRODUCTOTERMINADOes == null)
                {
                    _dEVOLUCIONPRODUCTOTERMINADOes = new TrackableCollection<DEVOLUCIONPRODUCTOTERMINADO>();
                    _dEVOLUCIONPRODUCTOTERMINADOes.CollectionChanged += FixupDEVOLUCIONPRODUCTOTERMINADOes;
                }
                return _dEVOLUCIONPRODUCTOTERMINADOes;
            }
            set
            {
                if (!ReferenceEquals(_dEVOLUCIONPRODUCTOTERMINADOes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dEVOLUCIONPRODUCTOTERMINADOes != null)
                    {
                        _dEVOLUCIONPRODUCTOTERMINADOes.CollectionChanged -= FixupDEVOLUCIONPRODUCTOTERMINADOes;
                    }
                    _dEVOLUCIONPRODUCTOTERMINADOes = value;
                    if (_dEVOLUCIONPRODUCTOTERMINADOes != null)
                    {
                        _dEVOLUCIONPRODUCTOTERMINADOes.CollectionChanged += FixupDEVOLUCIONPRODUCTOTERMINADOes;
                    }
                    OnNavigationPropertyChanged("DEVOLUCIONPRODUCTOTERMINADOes");
                }
            }
        }
        private TrackableCollection<DEVOLUCIONPRODUCTOTERMINADO> _dEVOLUCIONPRODUCTOTERMINADOes;
    
        [DataMember]
        public DEVOLUCIONPRODUCTOTERMINADO DEVOLUCIONPRODUCTOTERMINADO
        {
            get { return _dEVOLUCIONPRODUCTOTERMINADO; }
            set
            {
                if (!ReferenceEquals(_dEVOLUCIONPRODUCTOTERMINADO, value))
                {
                    var previousValue = _dEVOLUCIONPRODUCTOTERMINADO;
                    _dEVOLUCIONPRODUCTOTERMINADO = value;
                    FixupDEVOLUCIONPRODUCTOTERMINADO(previousValue);
                    OnNavigationPropertyChanged("DEVOLUCIONPRODUCTOTERMINADO");
                }
            }
        }
        private DEVOLUCIONPRODUCTOTERMINADO _dEVOLUCIONPRODUCTOTERMINADO;
    
        [DataMember]
        public LOTE LOTE
        {
            get { return _lOTE; }
            set
            {
                if (!ReferenceEquals(_lOTE, value))
                {
                    var previousValue = _lOTE;
                    _lOTE = value;
                    FixupLOTE(previousValue);
                    OnNavigationPropertyChanged("LOTE");
                }
            }
        }
        private LOTE _lOTE;
    
        [DataMember]
        public TIPOPRODUCTOTERMINADO TIPOPRODUCTOTERMINADO
        {
            get { return _tIPOPRODUCTOTERMINADO; }
            set
            {
                if (!ReferenceEquals(_tIPOPRODUCTOTERMINADO, value))
                {
                    var previousValue = _tIPOPRODUCTOTERMINADO;
                    _tIPOPRODUCTOTERMINADO = value;
                    FixupTIPOPRODUCTOTERMINADO(previousValue);
                    OnNavigationPropertyChanged("TIPOPRODUCTOTERMINADO");
                }
            }
        }
        private TIPOPRODUCTOTERMINADO _tIPOPRODUCTOTERMINADO;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DEVOLUCIONPRODUCTOTERMINADOes.Clear();
            DEVOLUCIONPRODUCTOTERMINADO = null;
            LOTE = null;
            TIPOPRODUCTOTERMINADO = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupDEVOLUCIONPRODUCTOTERMINADO(DEVOLUCIONPRODUCTOTERMINADO previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PRODUCTOTERMINADOes.Contains(this))
            {
                previousValue.PRODUCTOTERMINADOes.Remove(this);
            }
    
            if (DEVOLUCIONPRODUCTOTERMINADO != null)
            {
                DEVOLUCIONPRODUCTOTERMINADO.PRODUCTOTERMINADOes.Add(this);
    
                IDDEVOLUCIONPROD = DEVOLUCIONPRODUCTOTERMINADO.IDDEVOLUCIONPROD;
            }
            else if (!skipKeys)
            {
                IDDEVOLUCIONPROD = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DEVOLUCIONPRODUCTOTERMINADO")
                    && (ChangeTracker.OriginalValues["DEVOLUCIONPRODUCTOTERMINADO"] == DEVOLUCIONPRODUCTOTERMINADO))
                {
                    ChangeTracker.OriginalValues.Remove("DEVOLUCIONPRODUCTOTERMINADO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DEVOLUCIONPRODUCTOTERMINADO", previousValue);
                }
                if (DEVOLUCIONPRODUCTOTERMINADO != null && !DEVOLUCIONPRODUCTOTERMINADO.ChangeTracker.ChangeTrackingEnabled)
                {
                    DEVOLUCIONPRODUCTOTERMINADO.StartTracking();
                }
            }
        }
    
        private void FixupLOTE(LOTE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PRODUCTOTERMINADOes.Contains(this))
            {
                previousValue.PRODUCTOTERMINADOes.Remove(this);
            }
    
            if (LOTE != null)
            {
                LOTE.PRODUCTOTERMINADOes.Add(this);
    
                IDLOTE = LOTE.IDLOTE;
            }
            else if (!skipKeys)
            {
                IDLOTE = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LOTE")
                    && (ChangeTracker.OriginalValues["LOTE"] == LOTE))
                {
                    ChangeTracker.OriginalValues.Remove("LOTE");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LOTE", previousValue);
                }
                if (LOTE != null && !LOTE.ChangeTracker.ChangeTrackingEnabled)
                {
                    LOTE.StartTracking();
                }
            }
        }
    
        private void FixupTIPOPRODUCTOTERMINADO(TIPOPRODUCTOTERMINADO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PRODUCTOTERMINADOes.Contains(this))
            {
                previousValue.PRODUCTOTERMINADOes.Remove(this);
            }
    
            if (TIPOPRODUCTOTERMINADO != null)
            {
                TIPOPRODUCTOTERMINADO.PRODUCTOTERMINADOes.Add(this);
    
                IDTIPOPRODUCTOTERMINADO = TIPOPRODUCTOTERMINADO.IDTIPOPRODUCTOTERMINADO;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TIPOPRODUCTOTERMINADO")
                    && (ChangeTracker.OriginalValues["TIPOPRODUCTOTERMINADO"] == TIPOPRODUCTOTERMINADO))
                {
                    ChangeTracker.OriginalValues.Remove("TIPOPRODUCTOTERMINADO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TIPOPRODUCTOTERMINADO", previousValue);
                }
                if (TIPOPRODUCTOTERMINADO != null && !TIPOPRODUCTOTERMINADO.ChangeTracker.ChangeTrackingEnabled)
                {
                    TIPOPRODUCTOTERMINADO.StartTracking();
                }
            }
        }
    
        private void FixupDEVOLUCIONPRODUCTOTERMINADOes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DEVOLUCIONPRODUCTOTERMINADO item in e.NewItems)
                {
                    item.PRODUCTOTERMINADO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DEVOLUCIONPRODUCTOTERMINADOes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DEVOLUCIONPRODUCTOTERMINADO item in e.OldItems)
                {
                    if (ReferenceEquals(item.PRODUCTOTERMINADO, this))
                    {
                        item.PRODUCTOTERMINADO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DEVOLUCIONPRODUCTOTERMINADOes", item);
                    }
                }
            }
        }

        #endregion

    }
}
